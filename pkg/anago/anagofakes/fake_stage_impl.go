/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package anagofakes

import (
	"sync"
)

type FakeStageImpl struct {
	PrepareWorkspaceStageStub        func(string) error
	prepareWorkspaceStageMutex       sync.RWMutex
	prepareWorkspaceStageArgsForCall []struct {
		arg1 string
	}
	prepareWorkspaceStageReturns struct {
		result1 error
	}
	prepareWorkspaceStageReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStageImpl) PrepareWorkspaceStage(arg1 string) error {
	fake.prepareWorkspaceStageMutex.Lock()
	ret, specificReturn := fake.prepareWorkspaceStageReturnsOnCall[len(fake.prepareWorkspaceStageArgsForCall)]
	fake.prepareWorkspaceStageArgsForCall = append(fake.prepareWorkspaceStageArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PrepareWorkspaceStageStub
	fakeReturns := fake.prepareWorkspaceStageReturns
	fake.recordInvocation("PrepareWorkspaceStage", []interface{}{arg1})
	fake.prepareWorkspaceStageMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStageImpl) PrepareWorkspaceStageCallCount() int {
	fake.prepareWorkspaceStageMutex.RLock()
	defer fake.prepareWorkspaceStageMutex.RUnlock()
	return len(fake.prepareWorkspaceStageArgsForCall)
}

func (fake *FakeStageImpl) PrepareWorkspaceStageCalls(stub func(string) error) {
	fake.prepareWorkspaceStageMutex.Lock()
	defer fake.prepareWorkspaceStageMutex.Unlock()
	fake.PrepareWorkspaceStageStub = stub
}

func (fake *FakeStageImpl) PrepareWorkspaceStageArgsForCall(i int) string {
	fake.prepareWorkspaceStageMutex.RLock()
	defer fake.prepareWorkspaceStageMutex.RUnlock()
	argsForCall := fake.prepareWorkspaceStageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStageImpl) PrepareWorkspaceStageReturns(result1 error) {
	fake.prepareWorkspaceStageMutex.Lock()
	defer fake.prepareWorkspaceStageMutex.Unlock()
	fake.PrepareWorkspaceStageStub = nil
	fake.prepareWorkspaceStageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStageImpl) PrepareWorkspaceStageReturnsOnCall(i int, result1 error) {
	fake.prepareWorkspaceStageMutex.Lock()
	defer fake.prepareWorkspaceStageMutex.Unlock()
	fake.PrepareWorkspaceStageStub = nil
	if fake.prepareWorkspaceStageReturnsOnCall == nil {
		fake.prepareWorkspaceStageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.prepareWorkspaceStageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStageImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.prepareWorkspaceStageMutex.RLock()
	defer fake.prepareWorkspaceStageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStageImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
