// Code generated by counterfeiter. DO NOT EDIT.
package releasefakes

import (
	"sync"
)

type FakePublisherClient struct {
	GSUtilStub        func(...string) error
	gSUtilMutex       sync.RWMutex
	gSUtilArgsForCall []struct {
		arg1 []string
	}
	gSUtilReturns struct {
		result1 error
	}
	gSUtilReturnsOnCall map[int]struct {
		result1 error
	}
	GSUtilOutputStub        func(...string) (string, error)
	gSUtilOutputMutex       sync.RWMutex
	gSUtilOutputArgsForCall []struct {
		arg1 []string
	}
	gSUtilOutputReturns struct {
		result1 string
		result2 error
	}
	gSUtilOutputReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetURLResponseStub        func(string) (string, error)
	getURLResponseMutex       sync.RWMutex
	getURLResponseArgsForCall []struct {
		arg1 string
	}
	getURLResponseReturns struct {
		result1 string
		result2 error
	}
	getURLResponseReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePublisherClient) GSUtil(arg1 ...string) error {
	fake.gSUtilMutex.Lock()
	ret, specificReturn := fake.gSUtilReturnsOnCall[len(fake.gSUtilArgsForCall)]
	fake.gSUtilArgsForCall = append(fake.gSUtilArgsForCall, struct {
		arg1 []string
	}{arg1})
	stub := fake.GSUtilStub
	fakeReturns := fake.gSUtilReturns
	fake.recordInvocation("GSUtil", []interface{}{arg1})
	fake.gSUtilMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePublisherClient) GSUtilCallCount() int {
	fake.gSUtilMutex.RLock()
	defer fake.gSUtilMutex.RUnlock()
	return len(fake.gSUtilArgsForCall)
}

func (fake *FakePublisherClient) GSUtilCalls(stub func(...string) error) {
	fake.gSUtilMutex.Lock()
	defer fake.gSUtilMutex.Unlock()
	fake.GSUtilStub = stub
}

func (fake *FakePublisherClient) GSUtilArgsForCall(i int) []string {
	fake.gSUtilMutex.RLock()
	defer fake.gSUtilMutex.RUnlock()
	argsForCall := fake.gSUtilArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePublisherClient) GSUtilReturns(result1 error) {
	fake.gSUtilMutex.Lock()
	defer fake.gSUtilMutex.Unlock()
	fake.GSUtilStub = nil
	fake.gSUtilReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePublisherClient) GSUtilReturnsOnCall(i int, result1 error) {
	fake.gSUtilMutex.Lock()
	defer fake.gSUtilMutex.Unlock()
	fake.GSUtilStub = nil
	if fake.gSUtilReturnsOnCall == nil {
		fake.gSUtilReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.gSUtilReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePublisherClient) GSUtilOutput(arg1 ...string) (string, error) {
	fake.gSUtilOutputMutex.Lock()
	ret, specificReturn := fake.gSUtilOutputReturnsOnCall[len(fake.gSUtilOutputArgsForCall)]
	fake.gSUtilOutputArgsForCall = append(fake.gSUtilOutputArgsForCall, struct {
		arg1 []string
	}{arg1})
	stub := fake.GSUtilOutputStub
	fakeReturns := fake.gSUtilOutputReturns
	fake.recordInvocation("GSUtilOutput", []interface{}{arg1})
	fake.gSUtilOutputMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePublisherClient) GSUtilOutputCallCount() int {
	fake.gSUtilOutputMutex.RLock()
	defer fake.gSUtilOutputMutex.RUnlock()
	return len(fake.gSUtilOutputArgsForCall)
}

func (fake *FakePublisherClient) GSUtilOutputCalls(stub func(...string) (string, error)) {
	fake.gSUtilOutputMutex.Lock()
	defer fake.gSUtilOutputMutex.Unlock()
	fake.GSUtilOutputStub = stub
}

func (fake *FakePublisherClient) GSUtilOutputArgsForCall(i int) []string {
	fake.gSUtilOutputMutex.RLock()
	defer fake.gSUtilOutputMutex.RUnlock()
	argsForCall := fake.gSUtilOutputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePublisherClient) GSUtilOutputReturns(result1 string, result2 error) {
	fake.gSUtilOutputMutex.Lock()
	defer fake.gSUtilOutputMutex.Unlock()
	fake.GSUtilOutputStub = nil
	fake.gSUtilOutputReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePublisherClient) GSUtilOutputReturnsOnCall(i int, result1 string, result2 error) {
	fake.gSUtilOutputMutex.Lock()
	defer fake.gSUtilOutputMutex.Unlock()
	fake.GSUtilOutputStub = nil
	if fake.gSUtilOutputReturnsOnCall == nil {
		fake.gSUtilOutputReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.gSUtilOutputReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePublisherClient) GetURLResponse(arg1 string) (string, error) {
	fake.getURLResponseMutex.Lock()
	ret, specificReturn := fake.getURLResponseReturnsOnCall[len(fake.getURLResponseArgsForCall)]
	fake.getURLResponseArgsForCall = append(fake.getURLResponseArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetURLResponseStub
	fakeReturns := fake.getURLResponseReturns
	fake.recordInvocation("GetURLResponse", []interface{}{arg1})
	fake.getURLResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePublisherClient) GetURLResponseCallCount() int {
	fake.getURLResponseMutex.RLock()
	defer fake.getURLResponseMutex.RUnlock()
	return len(fake.getURLResponseArgsForCall)
}

func (fake *FakePublisherClient) GetURLResponseCalls(stub func(string) (string, error)) {
	fake.getURLResponseMutex.Lock()
	defer fake.getURLResponseMutex.Unlock()
	fake.GetURLResponseStub = stub
}

func (fake *FakePublisherClient) GetURLResponseArgsForCall(i int) string {
	fake.getURLResponseMutex.RLock()
	defer fake.getURLResponseMutex.RUnlock()
	argsForCall := fake.getURLResponseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePublisherClient) GetURLResponseReturns(result1 string, result2 error) {
	fake.getURLResponseMutex.Lock()
	defer fake.getURLResponseMutex.Unlock()
	fake.GetURLResponseStub = nil
	fake.getURLResponseReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePublisherClient) GetURLResponseReturnsOnCall(i int, result1 string, result2 error) {
	fake.getURLResponseMutex.Lock()
	defer fake.getURLResponseMutex.Unlock()
	fake.GetURLResponseStub = nil
	if fake.getURLResponseReturnsOnCall == nil {
		fake.getURLResponseReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getURLResponseReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePublisherClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.gSUtilMutex.RLock()
	defer fake.gSUtilMutex.RUnlock()
	fake.gSUtilOutputMutex.RLock()
	defer fake.gSUtilOutputMutex.RUnlock()
	fake.getURLResponseMutex.RLock()
	defer fake.getURLResponseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePublisherClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
